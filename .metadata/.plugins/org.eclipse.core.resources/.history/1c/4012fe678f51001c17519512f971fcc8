package com.revature.service;

import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.sql.SQLException;
import java.util.HashSet;
import java.util.Set;

import javax.security.auth.login.FailedLoginException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.revature.dao.UserDAO;
import com.revature.exceptions.FailedAuthenticationException;
import com.revature.exceptions.InvalidParameterException;
import com.revature.exceptions.NotFoundException;
import com.revature.model.User;

public class UserService implements UserServiceInterface {

	private Logger logger = LoggerFactory.getLogger(UserService.class);

	private UserDAO userDao;

	// For Mockito Test
	public UserService(UserDAO userDao) {
		this.userDao = userDao;
	}

	// Constructor
	public UserService() {
		this.userDao = new UserDAO();
	}

	@Override
	public User userLogin(String username, String password)
			throws SQLException, NoSuchAlgorithmException, InvalidKeySpecException, FailedLoginException {

		User user = this.userDao.userLogin(username, password);

		if (user == null) {
			throw new FailedLoginException("Incorrect username or passowrd");
		}

		return user;
	}

	@Override
	public void deleteUser(String username, String password)
			throws SQLException, NoSuchAlgorithmException, InvalidKeySpecException {

		logger.info("deleteUserById(userId)");

		try {

			User user = this.userDao.userLogin(username, password);

			if (user == null) {
				throw new NotFoundException("user with username " + username + " was not found. It cannot be deleted");
			}

			if (user.getUserId() == 0) {
				this.userDao.deleteUser(username, password);
			} else {
				throw new NotFoundException("Cannot find user");
			}

			this.userDao.deleteUser(username, password);

		} catch (NumberFormatException e) {

			throw new NotFoundException("Invalid parameter was thrown");
		}

	}

	@Override
	public User userSignup(String username, String password, String firstName, String lastName, String email,
			String role) throws SQLException, NoSuchAlgorithmException, InvalidKeySpecException,
			InvalidParameterException, NotFoundException, FailedAuthenticationException {

		logger.info("userSignUp (username...) invoked");

		// roles
		Set<String> userRole = new HashSet<>();
		userRole.add("Employee");
		userRole.add("Finance Manager");

		try {

			if (!(firstName.matches("[A-Z][a-z]*"))) {
				throw new InvalidParameterException("You entered an invalid first name");
			}

			if (firstName.trim().equals("")) {
				throw new NotFoundException("first name cannot be blank");
			}

			if (!(lastName.matches("[A-Z][a-z]*"))) {
				throw new InvalidParameterException("You entered an invalid last name");
			}

			if (lastName.trim().equals("")) {
				throw new NotFoundException("last name cannot be blank");
			}

			if (username.trim().equals("")) {
				throw new NotFoundException("user name cannot be blank");
			}

			if (!(email.matches("^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$"))) {
				throw new InvalidParameterException("You entered an invalid email");
			}

			if (email.trim().equals("")) {
				throw new NotFoundException("email cannot be blank");
			}

			if (password.trim().equals("")) {
				throw new NotFoundException("email cannot be blank");
			}

			if (!(password
					.matches("^(?=.*?[A-Z])(?=(.*[a-z]){1,})(?=(.*[\\d]){1,})(?=(.*[\\W]){1,})(?!.*\\s).{8,}$"))) {
				throw new InvalidParameterException("Password must contain 8 characters, "
						+ "one upper case letter, at least one letter, one number, and " + "one special character");

			}

			if (!(userRole.contains(role))) {
				throw new InvalidParameterException("You select an invalid role");
			}

			User user = this.userDao.userSignup(username, password, firstName, lastName, email, role);

			if (user == null) {
				throw new FailedAuthenticationException("Cannot sign up user! Try again later");
			}

			return user;

		} catch (NumberFormatException e) {

			throw new NotFoundException("Invalid parameter was thrown");
		}

	}

}
