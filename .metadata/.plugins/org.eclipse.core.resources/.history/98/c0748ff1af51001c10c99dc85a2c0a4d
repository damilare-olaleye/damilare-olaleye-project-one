package com.revature.service;

import java.sql.SQLException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import com.revature.dao.ReimbursementDAO;
import com.revature.exceptions.InvalidParameterException;
import com.revature.exceptions.NotFoundException;
import com.revature.exceptions.UnauthorizedException;
import com.revature.exceptions.reimbursementAlreadyResloved;
import com.revature.model.Reimbursement;
import com.revature.model.User;

public class ReimbursementService implements ReimbursementServiceInterface {

	ReimbursementDAO reimbursementDao = new ReimbursementDAO();

	public ReimbursementService() {
		this.reimbursementDao = new ReimbursementDAO();
	}

	public ReimbursementService(ReimbursementDAO reimbursementDao) {
		this.reimbursementDao = reimbursementDao;
	}

	@Override
	public Reimbursement submitReimbursementRequest(User currentlyLoggedInUser, String type, String description,
			int amount) throws InvalidParameterException, SQLException {

		Set<String> reimbursementTypes = new HashSet<>();

		reimbursementTypes.add("LODGING");
		reimbursementTypes.add("TRAVEL");
		reimbursementTypes.add("FOOD");
		reimbursementTypes.add("OTHER");

		if (!(reimbursementTypes.contains(type))) {
			throw new InvalidParameterException(
					"When adding an reimbursements: LODGING, only TRAVEL, FOOD, or OTHER are allowed");

		}

		int userId = currentlyLoggedInUser.getUserId();

		return this.reimbursementDao.submitRequest(type, description, amount, userId);

	}

	@Override
	public List<Reimbursement> getAllReimbursement(User currentlyLoggedInUser)
			throws SQLException, InvalidParameterException, UnauthorizedException {

		List<Reimbursement> reimbursements = this.reimbursementDao.getAllReimbursements();

		try {
			if (currentlyLoggedInUser.getRole().equals("Employee")) {
				throw new UnauthorizedException("You do not have access to this, sign in as a Finance Manager");
			} else {

				return reimbursements;

			}

		} catch (NumberFormatException e) {
			throw new InvalidParameterException("Reimbursement id supplied must be an int");

		}
	}

	@Override
	public Reimbursement updateReimbursement(User currentlyLoggedInUser, String reimbursementId, String status)
			throws InvalidParameterException, SQLException, NotFoundException, reimbursementAlreadyResloved {

		try {
			
			Set<String> reimbursementTypes = new HashSet<>();

			reimbursementTypes.add("PENDING");
			reimbursementTypes.add("APPROVED");
			reimbursementTypes.add("DECLINED");

			if (!(reimbursementTypes.contains(status))) {
				throw new InvalidParameterException(
						"When adding an reimbursements: LODGING, only TRAVEL, FOOD, or OTHER are allowed");

			}

			int id = Integer.parseInt(reimbursementId);
			Reimbursement reimbursement = this.reimbursementDao.getReimbursementById(id);

			if (reimbursement == null) {
				throw new NotFoundException("Reimbursement with id " + id + " cannot be found");
			}

			if (reimbursement.getResolver() == 0) {
				this.reimbursementDao.updateReimbursement(id, status, currentlyLoggedInUser.getUserId());
			} else {
				throw new reimbursementAlreadyResloved("Reimbursement has already been resolved");
			}

			return this.reimbursementDao.getReimbursementById(id);

		} catch (NumberFormatException e) {
			throw new InvalidParameterException("The id provided is not an int");
		}
	}

}
